#!/usr/bin/python
#
# wrapper for subscription Manager commandline tool.
#
# Copyright (c) 2010 Red Hat, Inc.
#
# Authors: Pradeep Kilambi
#
# This software is licensed to you under the GNU General Public License,
# version 2 (GPLv2). There is NO WARRANTY for this software, express or
# implied, including the implied warranties of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2
# along with this software; if not, see
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.
#
# Red Hat trademarks are not licensed under GPLv2. No permission is
# granted to use or replicate Red Hat trademarks that are incorporated
# in this software or its documentation.
#


if __name__ != '__main__':
    raise ImportError, "module cannot be imported"

import sys
import os
def systemExit(code, msgs=None):
    "Exit with a code and optional message(s). Saved a few lines of code."

    if msgs:
        if type(msgs) not in [type([]), type(())]:
            msgs = (msgs, )
        for msg in msgs:
            sys.stderr.write(str(msg)+'\n')
    sys.exit(code)


_LIBPATH = "/usr/share/rhsm"
# add to the path if need be
if _LIBPATH not in sys.path:
    sys.path.append(_LIBPATH)

# TODO: This works fine for CLI, but has no effect for GUI!? Have to 
# duplicate the i18n lines below for now:
#from managerlib import configure_i18n
#configure_i18n()
APP = 'rhsm'
DIR = '/usr/share/locale/'
import locale
import gettext
import gtk.glade
locale.setlocale(locale.LC_ALL, '')
for module in (gettext, gtk.glade):
    module.bindtextdomain(APP, DIR)
    module.textdomain(APP)

# quick check to see if you are a super-user.
if os.getuid() != 0:
    sys.stderr.write('ERROR: must be root to execute\n')
    sys.exit(8)

try:
    from gui import managergui
except KeyboardInterrupt:
    systemExit(0, "\nUser interrupted process.")
except ImportError, e:
    systemExit(2, "Unable to find Subscription Manager module.\n"
                  "Error: %s" % e)

def main():
    # execute
    try:
        return managergui.main()
    except KeyboardInterrupt:
        systemExit(0, "\nUser interrupted process.")

    return 0


if __name__ == '__main__':
    try:
        sys.exit(abs(main() or 0))
    except KeyboardInterrupt:
        systemExit(0, "\nUser interrupted process.")
    except Exception, e:
        systemExit(1, e)
